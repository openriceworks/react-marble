"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorNotBoundToRequestErrorFactory = exports.responseNotBoundToRequestErrorFactory = exports.unexpectedErrorWhileSendingResponseFactory = exports.isURIError = exports.isHttpRequestError = exports.isHttpError = exports.HttpRequestError = exports.HttpError = exports.HttpErrorType = void 0;
const chalk = require("chalk");
const core_1 = require("@marblejs/core");
const utils_1 = require("@marblejs/core/dist/+internal/utils");
var HttpErrorType;
(function (HttpErrorType) {
    HttpErrorType["HTTP_ERROR"] = "HttpError";
    HttpErrorType["HTTP_REQUEST_ERROR"] = "HttpRequestError";
})(HttpErrorType = exports.HttpErrorType || (exports.HttpErrorType = {}));
class HttpError extends utils_1.NamedError {
    constructor(message, status, data, request, context) {
        super(HttpErrorType.HTTP_ERROR, message);
        this.message = message;
        this.status = status;
        this.data = data;
        this.request = request;
        this.context = context;
    }
}
exports.HttpError = HttpError;
class HttpRequestError extends utils_1.NamedError {
    constructor(request, error) {
        super(HttpErrorType.HTTP_REQUEST_ERROR, 'An error occured while processing a request');
        this.request = request;
        this.error = error;
    }
}
exports.HttpRequestError = HttpRequestError;
const isHttpError = (error) => (error === null || error === void 0 ? void 0 : error.name) === HttpErrorType.HTTP_ERROR;
exports.isHttpError = isHttpError;
const isHttpRequestError = (error) => (error === null || error === void 0 ? void 0 : error.name) === HttpErrorType.HTTP_REQUEST_ERROR;
exports.isHttpRequestError = isHttpRequestError;
const isURIError = (error) => (error === null || error === void 0 ? void 0 : error.name) === 'URIError';
exports.isURIError = isURIError;
const unexpectedErrorWhileSendingResponseFactory = (error) => {
    const message = `An unexpected error ${chalk.red(`"${error.message}"`)} occured while sending a response. Please check your output/error effect.`;
    return (0, core_1.coreErrorFactory)(message, { printStacktrace: false });
};
exports.unexpectedErrorWhileSendingResponseFactory = unexpectedErrorWhileSendingResponseFactory;
const responseNotBoundToRequestErrorFactory = (response) => {
    const message = `An effect returned a response: "${chalk.yellow(JSON.stringify(response))}" without bound request`;
    return (0, core_1.coreErrorFactory)(message, { printStacktrace: false });
};
exports.responseNotBoundToRequestErrorFactory = responseNotBoundToRequestErrorFactory;
const errorNotBoundToRequestErrorFactory = (error) => {
    const message = `An effect or middleware thrown an error ${chalk.red(`"${error.message}"`)} without bound request.`;
    return (0, core_1.coreErrorFactory)(message, { printStacktrace: false });
};
exports.errorNotBoundToRequestErrorFactory = errorNotBoundToRequestErrorFactory;
