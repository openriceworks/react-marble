import { Stream } from 'stream';
import { Observable } from 'rxjs';
import * as IO from 'fp-ts/lib/IO';
import * as T from 'fp-ts/lib/Task';
import { ContextProvider } from '@marblejs/core';
import { HttpEffectResponse } from '../effects/http.effects.interface';
import { HttpHeaders, HttpRequest, HttpResponse, HttpStatus } from '../http.interface';
declare type HandleResponse = (ask: ContextProvider) => (res: HttpResponse) => (req: HttpRequest) => (effectResponse: HttpEffectResponse) => Observable<boolean>;
export declare const writeHead: (status: HttpStatus, headers: HttpHeaders) => (response: HttpResponse) => IO.IO<HttpHeaders>;
export declare const endRequestAndWriteBody: (body: any) => (res: HttpResponse) => T.Task<unknown>;
export declare const endRequest: (res: HttpResponse) => T.Task<unknown>;
export declare const streamBody: (body: Stream) => (response: HttpResponse) => T.Task<unknown>;
/**
 * Send HTTP response
 *
 * @sig `ContextProvider -> HttpResponse -> HttpRequest -> HttpEffectResponse -> Observable`
 * @since 1.0.0
 */
export declare const handleResponse: HandleResponse;
export {};
//# sourceMappingURL=http.responseHandler.d.ts.map