"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.close$ = exports.error$ = exports.listening$ = void 0;
const core_1 = require("@marblejs/core");
const operators_1 = require("rxjs/operators");
const http_server_event_1 = require("../server/http.server.event");
const listening$ = (event$, ctx) => {
    const logger = (0, core_1.useContext)(core_1.LoggerToken)(ctx.ask);
    return event$.pipe((0, core_1.matchEvent)(http_server_event_1.ServerEvent.listening), (0, operators_1.map)(event => event.payload), (0, operators_1.tap)(({ host, port }) => {
        const message = `Server running @ http://${host}:${port}/ ðŸš€`;
        const log = logger({ tag: "http" /* HTTP */, level: core_1.LoggerLevel.INFO, type: 'Server', message });
        log();
    }));
};
exports.listening$ = listening$;
const error$ = (event$, ctx) => {
    const logger = (0, core_1.useContext)(core_1.LoggerToken)(ctx.ask);
    return event$.pipe((0, core_1.matchEvent)(http_server_event_1.ServerEvent.error), (0, operators_1.map)(event => event.payload), (0, operators_1.tap)(({ error }) => {
        const message = `Unexpected server error occured: "${error.name}", "${error.message}"`;
        const log = logger({ tag: "http" /* HTTP */, level: core_1.LoggerLevel.ERROR, type: 'Server', message });
        log();
    }));
};
exports.error$ = error$;
const close$ = (event$, ctx) => {
    const logger = (0, core_1.useContext)(core_1.LoggerToken)(ctx.ask);
    return event$.pipe((0, core_1.matchEvent)(http_server_event_1.ServerEvent.close), (0, operators_1.map)(event => event.payload), (0, operators_1.tap)(() => {
        const message = `Server connection was closed`;
        const log = logger({ tag: "http" /* HTTP */, level: core_1.LoggerLevel.INFO, type: 'Server', message });
        log();
    }));
};
exports.close$ = close$;
