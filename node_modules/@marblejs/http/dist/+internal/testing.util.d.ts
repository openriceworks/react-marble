/// <reference types="jest" />
import * as http from 'http';
import { HttpRequest, HttpResponse, HttpHeaders, HttpMethod, RouteParameters, QueryParameters } from '../http.interface';
import { HttpEffect } from '../effects/http.effects.interface';
import { RoutingItem } from '../router/http.router.interface';
interface HttpRequestMockParams {
    url?: string;
    body?: any;
    params?: RouteParameters;
    query?: QueryParameters;
    headers?: HttpHeaders;
    method?: HttpMethod;
    meta?: Record<string, any>;
    response?: HttpResponse;
    [key: string]: any;
}
interface HttpResponseMockParams {
    statusCode?: number;
    finished?: boolean;
    [key: string]: any;
}
export interface HttpServerMocks {
    listen?: jest.Mock;
    close?: jest.Mock;
    on?: jest.Mock;
}
export declare const createHttpRequest: (data?: HttpRequestMockParams | undefined) => HttpRequest<unknown, unknown, unknown>;
export declare const createHttpResponse: (data?: HttpResponseMockParams) => HttpResponse;
export declare const createMockEffectContext: () => import("@marblejs/core").EffectContext<http.Server, import("rxjs").SchedulerLike>;
export declare const createTestRoute: (opts?: {
    throwError?: boolean | undefined;
    delay?: number | undefined;
    method?: "POST" | "PUT" | "PATCH" | "GET" | "HEAD" | "DELETE" | "CONNECT" | "OPTIONS" | "TRACE" | "*" | undefined;
    effectSpy?: jest.Mock<any, any> | undefined;
} | undefined) => {
    req: HttpRequest<unknown, unknown, unknown>;
    path: import("../router/http.router.interface").ParametricRegExp;
    effect: HttpEffect<HttpRequest<unknown, unknown, unknown>, import("../effects/http.effects.interface").HttpEffectResponse<any>>;
    item: RoutingItem;
};
export {};
//# sourceMappingURL=testing.util.d.ts.map