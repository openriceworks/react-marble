"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isJsonContentType = exports.getMimeType = exports.getContentTypeEncoding = exports.getContentTypeUnsafe = exports.getContentLength = exports.getContentType = exports.ContentType = void 0;
const fileType = require("file-type");
const mime = require("mime");
const O = require("fp-ts/lib/Option");
const function_1 = require("fp-ts/lib/function");
const utils_1 = require("@marblejs/core/dist/+internal/utils");
const header_util_1 = require("./header.util");
var ContentType;
(function (ContentType) {
    ContentType["APPLICATION"] = "application/*";
    ContentType["APPLICATION_RTF"] = "application/rtf";
    ContentType["APPLICATION_ZIP"] = "application/zip";
    ContentType["APPLICATION_X_RAR"] = "application/x-rar-compressed";
    ContentType["APPLICATION_X_TAR"] = "application/x-tar";
    ContentType["APPLICATION_X_TZ_COMPRESSED"] = "application/x-7z-compressed";
    ContentType["APPLICATION_X_WWW_FORM_URLENCODED"] = "application/x-www-form-urlencoded";
    ContentType["APPLICATION_PDF"] = "application/pdf";
    ContentType["APPLICATION_JSON"] = "application/json";
    ContentType["APPLICATION_JAVASCRIPT"] = "application/javascript";
    ContentType["APPLICATION_ECMASCRIPT"] = "application/ecmascript";
    ContentType["APPLICATION_XML"] = "application/xml";
    ContentType["APPLICATION_OCTET_STREAM"] = "application/octet-stream";
    ContentType["APPLICATION_VND_API_JSON"] = "application/vnd.api+json";
    ContentType["TEXT_PLAIN"] = "text/plain";
    ContentType["TEXT_HTML"] = "text/html";
    ContentType["TEXT_CSS"] = "text/css";
    ContentType["TEXT_CSV"] = "text/csv";
    ContentType["IMAGE_WEBP"] = "image/webp";
    ContentType["IMAGE_JPEG"] = "image/jpeg";
    ContentType["IMAGE_PNG"] = "image/png";
    ContentType["IMAGE_GIF"] = "image/gif";
    ContentType["IMAGE_TIFF"] = "image/tiff";
    ContentType["IMAGE_SVG_XML"] = "image/svg+xml";
    ContentType["AUDIO_MPEG"] = "audio/mpeg";
    ContentType["AUDIO_OGG"] = "audio/ogg";
    ContentType["AUDIO"] = "audio/*";
    ContentType["VIDEO_WEBM"] = "video/webm";
    ContentType["VIDEO_MP4"] = "video/mp4";
    ContentType["FONT_TTF"] = "font/ttf";
    ContentType["FONT_WOFF"] = "font/woff";
    ContentType["FONT_WOFF2"] = "font/woff2";
    ContentType["MULTIPART_FORM_DATA"] = "multipart/form-data";
})(ContentType = exports.ContentType || (exports.ContentType = {}));
/**
 * Get `Content-Type` header value from provided headers object
 *
 * @see getHeaderValue
 * @since 4.0.0
 */
exports.getContentType = (0, header_util_1.getHeaderValue)('Content-Type');
/**
 * Get `Content-Length` header value from provided headers object
 *
 * @see getHeaderValue
 * @since 4.0.0
 */
exports.getContentLength = (0, header_util_1.getHeaderValue)('Content-Length');
/**
 * Get **UNSAFE** `Content-Type` header value from provided headers object
 *
 * @see getHeaderValue
 * @since 4.0.0
 */
const getContentTypeUnsafe = (headers) => (0, function_1.pipe)((0, exports.getContentType)(headers), O.getOrElse((0, function_1.constant)('')));
exports.getContentTypeUnsafe = getContentTypeUnsafe;
/**
 * Get `Content-Type` charset (encoding) value, either from provided headers object or header value directly
 *
 * @since 4.0.0
 */
const getContentTypeEncoding = (headersOrContentType) => (0, function_1.pipe)((0, utils_1.isString)(headersOrContentType) ? O.some(headersOrContentType) : (0, exports.getContentType)(headersOrContentType), O.chain(cType => O.fromNullable(/charset=([^()<>@,;:\"/[\]?.=\s]*)/i.exec(cType))), O.chain(res => O.fromNullable(res[1] || null)), O.map(encoding => encoding.toLowerCase()));
exports.getContentTypeEncoding = getContentTypeEncoding;
/**
 * Guess mime type for given combination of request body and path
 *
 * @param body request body
 * @param path request url
 * @returns `string | null`
 * @since 1.0.0
 */
const getMimeType = (body, path) => (0, function_1.pipe)(O.fromNullable(Buffer.isBuffer(body) ? fileType(body) : null), O.map(mimeFromBuffer => mimeFromBuffer.mime), O.getOrElse(() => mime.getType(path)));
exports.getMimeType = getMimeType;
/**
 * Checks whether given Content-Type header value is of `json` type
 *
 * @param headerValue
 * @returns boolean
 * @since 1.0.0
 */
const isJsonContentType = (headerValue) => headerValue.includes('json');
exports.isJsonContentType = isJsonContentType;
