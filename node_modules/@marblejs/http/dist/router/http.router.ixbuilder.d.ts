import { IxBuilder } from '@marblejs/core/dist/+internal/fp/IxBuilder';
import { HttpMiddlewareEffect, HttpEffect } from '../effects/http.effects.interface';
import { HttpMethod } from '../http.interface';
import { RouteEffect, RouteMeta } from './http.router.interface';
declare type Arity<A, B> = (a: A) => B;
declare function pipe<A, B>(f1: Arity<A, B>): RouteEffect;
declare function pipe<A, B, C>(f1: Arity<A, B>, f2: Arity<B, C>): RouteEffect;
declare function pipe<A, B, C, D>(f1: Arity<A, B>, f2: Arity<B, C>, f3: Arity<C, D>): RouteEffect;
declare function pipe<A, B, C, D, E>(f1: Arity<A, B>, f2: Arity<B, C>, f3: Arity<C, D>, f4: Arity<D, E>): RouteEffect;
declare function pipe<A, B, C, D, E, F>(f1: Arity<A, B>, f2: Arity<B, C>, f3: Arity<C, D>, f4: Arity<D, E>, f5: Arity<E, F>): RouteEffect;
declare function pipe<A, B, C, D, E, F, G>(f1: Arity<A, B>, f2: Arity<B, C>, f3: Arity<C, D>, f4: Arity<D, E>, f5: Arity<E, F>, f6: Arity<F, G>): RouteEffect;
declare function pipe<A, B, C, D, E, F, G, H>(f1: Arity<A, B>, f2: Arity<B, C>, f3: Arity<C, D>, f4: Arity<D, E>, f5: Arity<E, F>, f6: Arity<F, G>, f7: Arity<G, H>): RouteEffect;
declare function pipe<A, B, C, D, E, F, G, H, I>(f1: Arity<A, B>, f2: Arity<B, C>, f3: Arity<C, D>, f4: Arity<D, E>, f5: Arity<E, F>, f6: Arity<F, G>, f7: Arity<G, H>, f8: Arity<H, I>): RouteEffect;
declare function pipe<A, B, C, D, E, F, G, H, I, J>(f1: Arity<A, B>, f2: Arity<B, C>, f3: Arity<C, D>, f4: Arity<D, E>, f5: Arity<E, F>, f6: Arity<F, G>, f7: Arity<G, H>, f8: Arity<H, I>, f9: Arity<I, J>): RouteEffect;
declare function pipe<A, B, C, D, E, F, G, H, I, J, K>(f1: Arity<A, B>, f2: Arity<B, C>, f3: Arity<C, D>, f4: Arity<D, E>, f5: Arity<E, F>, f6: Arity<F, G>, f7: Arity<G, H>, f8: Arity<H, I>, f9: Arity<I, J>, f10: Arity<J, K>): RouteEffect;
export declare const r: {
    matchPath: (path: string) => (fa: IxBuilder<unknown, "Empty" | "MetaApplied", Partial<RouteEffect<import("../http.interface").HttpRequest<unknown, unknown, unknown>>>>) => IxBuilder<unknown, "PathApplied", Partial<RouteEffect<import("../http.interface").HttpRequest<unknown, unknown, unknown>>>>;
    matchType: (method: HttpMethod) => (fa: IxBuilder<unknown, "PathApplied", Partial<RouteEffect<import("../http.interface").HttpRequest<unknown, unknown, unknown>>>>) => IxBuilder<unknown, "TypeApplied", Partial<RouteEffect<import("../http.interface").HttpRequest<unknown, unknown, unknown>>>>;
    use: (middleware: HttpMiddlewareEffect) => (fa: IxBuilder<unknown, "TypeApplied" | "MiddlewareApplied", Partial<RouteEffect<import("../http.interface").HttpRequest<unknown, unknown, unknown>>>>) => IxBuilder<unknown, "MiddlewareApplied", Partial<RouteEffect<import("../http.interface").HttpRequest<unknown, unknown, unknown>>>>;
    useEffect: (effect: HttpEffect) => (fa: IxBuilder<unknown, "TypeApplied" | "MiddlewareApplied", Partial<RouteEffect<import("../http.interface").HttpRequest<unknown, unknown, unknown>>>>) => IxBuilder<unknown, "EffectApplied", Partial<RouteEffect<import("../http.interface").HttpRequest<unknown, unknown, unknown>>>>;
    applyMeta: (meta: RouteMeta) => (fa: IxBuilder<unknown, "MetaApplied" | "EffectApplied", Partial<RouteEffect<import("../http.interface").HttpRequest<unknown, unknown, unknown>>>>) => IxBuilder<unknown, "MetaApplied", Partial<RouteEffect<import("../http.interface").HttpRequest<unknown, unknown, unknown>>>>;
    pipe: typeof pipe;
};
export {};
//# sourceMappingURL=http.router.ixbuilder.d.ts.map