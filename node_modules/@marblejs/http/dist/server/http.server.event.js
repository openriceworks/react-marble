"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRequestEvent = exports.isErrorEvent = exports.isUpgradeEvent = exports.isListeningEvent = exports.isCheckExpectationEvent = exports.isCheckContinueEvent = exports.isCloseEvent = exports.isClientErrorEvent = exports.isConnectionEvent = exports.isConnectEvent = exports.ServerEvent = exports.ServerEventType = void 0;
const core_1 = require("@marblejs/core");
var ServerEventType;
(function (ServerEventType) {
    ServerEventType["CONNECT"] = "connect";
    ServerEventType["CONNECTION"] = "connection";
    ServerEventType["CLIENT_ERROR"] = "clientError";
    ServerEventType["CLOSE"] = "close";
    ServerEventType["CHECK_CONTINUE"] = "checkContinue";
    ServerEventType["CHECK_EXPECTATION"] = "checkExpectation";
    ServerEventType["ERROR"] = "error";
    ServerEventType["REQUEST"] = "request";
    ServerEventType["UPGRADE"] = "upgrade";
    ServerEventType["LISTENING"] = "listening";
})(ServerEventType = exports.ServerEventType || (exports.ServerEventType = {}));
exports.ServerEvent = {
    connect: (0, core_1.createEvent)(ServerEventType.CONNECT, (request, socket, head) => ({ request, socket, head })),
    connection: (0, core_1.createEvent)(ServerEventType.CONNECTION, (socket) => ({ socket })),
    clientError: (0, core_1.createEvent)(ServerEventType.CLIENT_ERROR, (error, socket) => ({ error, socket })),
    close: (0, core_1.createEvent)(ServerEventType.CLOSE),
    checkContinue: (0, core_1.createEvent)(ServerEventType.CHECK_CONTINUE, (request, response) => ({ request, response })),
    checkExpectation: (0, core_1.createEvent)(ServerEventType.CHECK_EXPECTATION, (request, response) => ({ request, response })),
    error: (0, core_1.createEvent)(ServerEventType.ERROR, (error) => ({ error })),
    request: (0, core_1.createEvent)(ServerEventType.REQUEST, (request, response) => ({ request, response })),
    upgrade: (0, core_1.createEvent)(ServerEventType.UPGRADE, (request, socket, head) => ({ request, socket, head })),
    listening: (0, core_1.createEvent)(ServerEventType.LISTENING, (port, host) => ({ port, host })),
};
function isConnectEvent(event) {
    return event.type === ServerEventType.CONNECT;
}
exports.isConnectEvent = isConnectEvent;
function isConnectionEvent(event) {
    return event.type === ServerEventType.CONNECTION;
}
exports.isConnectionEvent = isConnectionEvent;
function isClientErrorEvent(event) {
    return event.type === ServerEventType.CLIENT_ERROR;
}
exports.isClientErrorEvent = isClientErrorEvent;
function isCloseEvent(event) {
    return event.type === ServerEventType.CLOSE;
}
exports.isCloseEvent = isCloseEvent;
function isCheckContinueEvent(event) {
    return event.type === ServerEventType.CHECK_CONTINUE;
}
exports.isCheckContinueEvent = isCheckContinueEvent;
function isCheckExpectationEvent(event) {
    return event.type === ServerEventType.CHECK_EXPECTATION;
}
exports.isCheckExpectationEvent = isCheckExpectationEvent;
function isListeningEvent(event) {
    return event.type === ServerEventType.LISTENING;
}
exports.isListeningEvent = isListeningEvent;
function isUpgradeEvent(event) {
    return event.type === ServerEventType.UPGRADE;
}
exports.isUpgradeEvent = isUpgradeEvent;
function isErrorEvent(event) {
    return event.type === ServerEventType.ERROR;
}
exports.isErrorEvent = isErrorEvent;
function isRequestEvent(event) {
    return event.type === ServerEventType.REQUEST;
}
exports.isRequestEvent = isRequestEvent;
