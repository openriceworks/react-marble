"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpServerEventStream = exports.HttpServerEventStreamToken = void 0;
const rxjs_1 = require("rxjs");
const core_1 = require("@marblejs/core");
const http_server_event_1 = require("../http.server.event");
const http_server_interface_1 = require("../http.server.interface");
exports.HttpServerEventStreamToken = (0, core_1.createContextToken)('HttpServerEventStream');
/**
 * HTTP server event stream reader responsible for subscribing to raw Node.js HTTP server events
 * and giving them in normalized Observable form
 */
const HttpServerEventStream = (opts) => (0, core_1.createReader)(_ => {
    const { server, hostname } = opts;
    const event$ = new rxjs_1.Subject();
    server.on(http_server_event_1.ServerEventType.CONNECT, (req, socket, head) => event$.next(http_server_event_1.ServerEvent.connect(req, socket, head)));
    server.on(http_server_event_1.ServerEventType.CONNECTION, (socket) => event$.next(http_server_event_1.ServerEvent.connection(socket)));
    server.on(http_server_event_1.ServerEventType.CLIENT_ERROR, (error, socket) => event$.next(http_server_event_1.ServerEvent.clientError(error, socket)));
    server.on(http_server_event_1.ServerEventType.CLOSE, () => event$.next(http_server_event_1.ServerEvent.close()));
    server.on(http_server_event_1.ServerEventType.CHECK_CONTINUE, (req, res) => event$.next(http_server_event_1.ServerEvent.checkContinue(req, res)));
    server.on(http_server_event_1.ServerEventType.CHECK_EXPECTATION, (req, res) => event$.next(http_server_event_1.ServerEvent.checkExpectation(req, res)));
    server.on(http_server_event_1.ServerEventType.ERROR, (error) => event$.next(http_server_event_1.ServerEvent.error(error)));
    server.on(http_server_event_1.ServerEventType.REQUEST, (req, res) => event$.next(http_server_event_1.ServerEvent.request(req, res)));
    server.on(http_server_event_1.ServerEventType.UPGRADE, (req, socket, head) => event$.next(http_server_event_1.ServerEvent.upgrade(req, socket, head)));
    server.on(http_server_event_1.ServerEventType.LISTENING, () => {
        const serverAddressInfo = server.address();
        event$.next(http_server_event_1.ServerEvent.listening(serverAddressInfo.port, hostname !== null && hostname !== void 0 ? hostname : http_server_interface_1.DEFAULT_HOSTNAME));
    });
    return event$.asObservable();
});
exports.HttpServerEventStream = HttpServerEventStream;
