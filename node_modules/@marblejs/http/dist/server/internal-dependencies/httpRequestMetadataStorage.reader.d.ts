import { HttpEffectResponse } from '../../effects/http.effects.interface';
import { HttpRequestMetadata, WithHttpRequest } from '../../http.interface';
export declare type HttpRequestMetadataStorage = Readonly<ReturnType<typeof HttpRequestMetadataStorage>>;
export declare const HttpRequestMetadataStorageToken: {
    _id: string;
    _T: Readonly<{
        /**
         * Gets request metadata for given key (request ID) and removes it from storage
         *
         * @param key request ID
         * @returns HttpRequestMetadata | undefined
         */
        get: (key: string) => HttpRequestMetadata | undefined;
        /**
         * Set request metadata for given key (request ID)
         *
         * @param key request ID
         * @param metadata request metadata
         * @returns void
         */
        set: (key: string | undefined, metadata: HttpRequestMetadata | undefined) => void;
        /**
         * @returns total count of stored request metadatas
         */
        size: () => number;
        /**
         * Collects request metadata from HttpEffect response
         *
         * @param response HttpEffectResponse & HttpRequest
         * @returns void
         */
        collect: (response: WithHttpRequest<HttpEffectResponse>) => void;
    }>;
    name?: string | undefined;
};
export declare const HttpRequestMetadataStorage: import("fp-ts/lib/Reader").Reader<import("@marblejs/core").Context, {
    /**
     * Gets request metadata for given key (request ID) and removes it from storage
     *
     * @param key request ID
     * @returns HttpRequestMetadata | undefined
     */
    get: (key: string) => HttpRequestMetadata | undefined;
    /**
     * Set request metadata for given key (request ID)
     *
     * @param key request ID
     * @param metadata request metadata
     * @returns void
     */
    set: (key: string | undefined, metadata: HttpRequestMetadata | undefined) => void;
    /**
     * @returns total count of stored request metadatas
     */
    size: () => number;
    /**
     * Collects request metadata from HttpEffect response
     *
     * @param response HttpEffectResponse & HttpRequest
     * @returns void
     */
    collect: (response: WithHttpRequest<HttpEffectResponse>) => void;
}>;
//# sourceMappingURL=httpRequestMetadataStorage.reader.d.ts.map