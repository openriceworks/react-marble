"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpRequestMetadataStorage = exports.HttpRequestMetadataStorageToken = void 0;
const core_1 = require("@marblejs/core");
const O = require("fp-ts/lib/Option");
const function_1 = require("fp-ts/lib/function");
const metadata_util_1 = require("../../+internal/metadata.util");
exports.HttpRequestMetadataStorageToken = (0, core_1.createContextToken)('HttpRequestMetadataStorage');
exports.HttpRequestMetadataStorage = (0, core_1.createReader)(() => {
    const storage = new Map();
    const set = (key, metadata) => {
        if (key && metadata)
            storage.set(key, metadata);
    };
    const get = (key) => {
        const metadata = storage.get(key);
        storage.delete(key);
        return metadata;
    };
    const size = () => storage.size;
    const collect = (response) => (0, function_1.pipe)((0, metadata_util_1.getHttpRequestMetadataIdHeader)(response.request.headers), O.fold(function_1.constVoid, requestId => set(requestId, response.request.meta)));
    return {
        /**
         * Gets request metadata for given key (request ID) and removes it from storage
         *
         * @param key request ID
         * @returns HttpRequestMetadata | undefined
         */
        get,
        /**
         * Set request metadata for given key (request ID)
         *
         * @param key request ID
         * @param metadata request metadata
         * @returns void
         */
        set,
        /**
         * @returns total count of stored request metadatas
         */
        size,
        /**
         * Collects request metadata from HttpEffect response
         *
         * @param response HttpEffectResponse & HttpRequest
         * @returns void
         */
        collect,
    };
});
