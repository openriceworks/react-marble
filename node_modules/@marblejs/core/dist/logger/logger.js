"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockLogger = exports.logger = void 0;
const chalk = require("chalk");
const IO_1 = require("fp-ts/lib/IO");
const O = require("fp-ts/lib/Option");
const pipeable_1 = require("fp-ts/lib/pipeable");
const function_1 = require("fp-ts/lib/function");
const context_reader_factory_1 = require("../context/context.reader.factory");
const utils_1 = require("../+internal/utils");
const logger_interface_1 = require("./logger.interface");
const print = (message) => () => {
    process.stdout.write(message + '\n');
};
const colorizeText = (level) => (0, pipeable_1.pipe)(O.fromNullable({
    [logger_interface_1.LoggerLevel.ERROR]: chalk.red,
    [logger_interface_1.LoggerLevel.INFO]: chalk.green,
    [logger_interface_1.LoggerLevel.WARN]: chalk.yellow,
    [logger_interface_1.LoggerLevel.DEBUG]: chalk.magenta,
    [logger_interface_1.LoggerLevel.VERBOSE]: function_1.identity,
}[level]), O.getOrElse(() => function_1.identity));
const formatDate = (date) => date
    .toISOString()
    .replace(/T/, ' ')
    .replace(/\..+/, '');
exports.logger = (0, context_reader_factory_1.createReader)(() => opts => {
    var _a, _b;
    const sep = ' - ';
    const truncItem = (0, utils_1.trunc)(15);
    const colorize = colorizeText((_a = opts.level) !== null && _a !== void 0 ? _a : logger_interface_1.LoggerLevel.INFO);
    const sign = chalk.magenta('Î»');
    const now = formatDate(new Date());
    const pid = chalk.green(((_b = process.pid.toString()) !== null && _b !== void 0 ? _b : '-'));
    const tag = chalk.gray(truncItem(opts.tag)) + ' ' + colorize(`[${opts.type}]`);
    const message = opts.level === logger_interface_1.LoggerLevel.ERROR ? chalk.red(opts.message) : opts.message;
    return print(sign + sep + pid + sep + now + sep + tag + sep + message);
});
exports.mockLogger = (0, context_reader_factory_1.createReader)(() => _ => IO_1.io.of(function_1.constUndefined));
