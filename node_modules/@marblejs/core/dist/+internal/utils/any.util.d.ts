import { Observable, UnaryFunction } from 'rxjs';
import { IO } from 'fp-ts/lib/IO';
import { Task } from 'fp-ts/lib/Task';
export declare const isNonNullable: <T>(value: T) => value is NonNullable<T>;
export declare const isNullable: <T>(value: T) => boolean;
export declare const isTestEnv: () => boolean;
export declare const getPortEnv: () => number | undefined;
export declare const wait: (seconds?: number) => Promise<unknown>;
export declare const bufferFrom: (data: any) => Buffer;
export declare const stringifyJson: (data: any) => string;
export declare const parseJson: (data: any) => any;
export declare const pipeFromArray: <T, R>(fns: UnaryFunction<T, R>[]) => UnaryFunction<T, R>;
export declare const fromIO: <T>(fa: IO<T>) => Observable<T>;
export declare const fromTask: <T>(fa: Task<T>) => Observable<T>;
//# sourceMappingURL=any.util.d.ts.map