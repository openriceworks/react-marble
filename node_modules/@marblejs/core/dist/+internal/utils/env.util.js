"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnvConfigOrElseAsBoolean = exports.getEnvConfigOrElse = exports.getEnvConfig = void 0;
const IO = require("fp-ts/IO");
const Option_1 = require("fp-ts/Option");
const function_1 = require("fp-ts/function");
function memoize(ma) {
    let cache;
    let isMemoized = false;
    return () => {
        if (!isMemoized) {
            cache = ma();
            isMemoized = true;
        }
        return cache;
    };
}
/**
 * Read env config (but only once, value is cached)
 *
 * @param key - env variable to read.
 * @see getEnvConfigOrElse
 */
const getEnvConfig = (envKey) => memoize(() => (0, Option_1.fromNullable)(process.env[envKey]));
exports.getEnvConfig = getEnvConfig;
/**
 * Read env config with fallback value in case it is not defined.
 *
 * @param envKey
 * @param onNone
 * @see getEnvConfig
 */
const getEnvConfigOrElse = (envKey, onNone) => (0, function_1.pipe)((0, exports.getEnvConfig)(envKey), IO.map((0, Option_1.getOrElse)(() => onNone)));
exports.getEnvConfigOrElse = getEnvConfigOrElse;
/**
 * Read env config using #getEnvConfigOrElse and converts the value to boolean
 * defined value must be "true" (case insensitive) to be true.
 *
 * @param envKey
 * @param onNone
 * @see getEnvConfigOrElse
 */
const getEnvConfigOrElseAsBoolean = (envKey, onNone) => (0, function_1.pipe)((0, exports.getEnvConfigOrElse)(envKey, String(onNone)), IO.map(val => val.toLowerCase() === 'true'));
exports.getEnvConfigOrElseAsBoolean = getEnvConfigOrElseAsBoolean;
