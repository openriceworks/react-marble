import * as IO from 'fp-ts/IO';
import { Option } from 'fp-ts/Option';
/**
 * Read env config (but only once, value is cached)
 *
 * @param key - env variable to read.
 * @see getEnvConfigOrElse
 */
export declare const getEnvConfig: (envKey: string) => IO.IO<Option<string>>;
/**
 * Read env config with fallback value in case it is not defined.
 *
 * @param envKey
 * @param onNone
 * @see getEnvConfig
 */
export declare const getEnvConfigOrElse: (envKey: string, onNone: string) => IO.IO<string>;
/**
 * Read env config using #getEnvConfigOrElse and converts the value to boolean
 * defined value must be "true" (case insensitive) to be true.
 *
 * @param envKey
 * @param onNone
 * @see getEnvConfigOrElse
 */
export declare const getEnvConfigOrElseAsBoolean: (envKey: string, onNone: 'false' | 'true' | true | false) => IO.IO<boolean>;
//# sourceMappingURL=env.util.d.ts.map