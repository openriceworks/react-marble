import * as R from 'fp-ts/lib/Reader';
import * as O from 'fp-ts/lib/Option';
import * as E from 'fp-ts/lib/Eq';
import { Ord } from 'fp-ts/lib/Ord';
import { ContextToken } from './context.token.factory';
export declare const ordContextToken: Ord<ContextToken<unknown>>;
export declare const setoidContextToken: E.Eq<ContextToken>;
export interface Context extends Map<ContextToken, ContextDependency | any> {
}
export interface ContextProvider {
    <T>(token: ContextToken<T>): O.Option<T>;
}
export interface ContextReader extends R.Reader<Context, any> {
}
export declare enum ContextReaderTag {
    EAGER_READER = 0,
    LAZY_READER = 1
}
export interface ContextEagerReader {
    tag: ContextReaderTag.EAGER_READER;
    eval: ContextReader;
}
export interface ContextLazyReader {
    tag: ContextReaderTag.LAZY_READER;
    eval: () => ContextReader;
}
export declare type ContextDependency = ContextEagerReader | ContextLazyReader;
export interface BoundDependency<T, U extends ContextDependency = ContextDependency> {
    token: ContextToken<T>;
    dependency: U;
}
export declare const DerivedContextToken: {
    _id: string;
    _T: Context;
    name?: string | undefined;
};
export declare const createContext: () => Map<never, never>;
export declare const register: <T>(boundDependency: BoundDependency<T, ContextDependency>) => (context: Context) => Context;
export declare const registerAll: (boundDependencies: BoundDependency<any, any>[]) => (context: Context) => Context;
/**
 * Unregisters given token from the context
 * @since v3.4.0
 */
export declare const unregister: (token: ContextToken) => (context: Context) => Context;
/**
 * Resolves eager dependencies within the context
 * @since v2.0.0
 */
export declare const resolve: (context: Context) => Promise<Context>;
/**
 * Lookup the dependency for a token in a `Context`
 * @since v2.0.0
 */
export declare const lookup: (context: Context) => <T>(token: ContextToken<T>) => O.Option<T>;
/**
 * Binds context token to a lazy dependency.
 * @since v3.0.0
 */
export declare const bindLazilyTo: <T>(token: ContextToken<T>) => <U extends ContextReader>(dependency: U) => BoundDependency<T, ContextLazyReader>;
/**
 * Binds context token to a eager dependency.
 * @since v3.0.0
 */
export declare const bindEagerlyTo: <T>(token: ContextToken<T>) => <U extends ContextReader>(dependency: U) => BoundDependency<T, ContextEagerReader>;
/**
 * An alias to `bindLazilyTo`.
 * Binds context token to a lazy dependency.
 * @since v3.0.0
 */
export declare const bindTo: <T>(token: ContextToken<T>) => <U extends ContextReader>(dependency: U) => BoundDependency<T, ContextLazyReader>;
export declare const reader: R.Reader<Context, <T>(token: ContextToken<T>) => O.Option<T>>;
//# sourceMappingURL=context.d.ts.map