"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.coreErrorFactory = exports.coreErrorStackTraceFactory = exports.stringifyStackTrace = void 0;
const chalk = require("chalk");
const error_model_1 = require("./error.model");
const stringifyStackTrace = (stackTrace) => stackTrace
    .map(s => chalk.gray(`    @ ${s}`))
    .join('\n  ');
exports.stringifyStackTrace = stringifyStackTrace;
const coreErrorStackTraceFactory = (opts) => (message, stack) => {
    var _a, _b, _c, _d, _e, _f, _g;
    const methodPointer = (_a = opts.offset) !== null && _a !== void 0 ? _a : 0;
    const printStacktrace = (_b = opts.printStacktrace) !== null && _b !== void 0 ? _b : true;
    const method = stack[methodPointer];
    const filePointer = methodPointer + 1;
    const file = stack[filePointer];
    const restStack = stack.slice(filePointer, stack.length);
    const [line, col] = [(_c = file.getLineNumber()) !== null && _c !== void 0 ? _c : 0, (_d = file.getColumnNumber()) !== null && _d !== void 0 ? _d : 0];
    const packageName = (_e = opts.contextPackage) !== null && _e !== void 0 ? _e : '@marblejs/core';
    const methodName = opts.contextMethod + ' : ' + ((_f = method.getMethodName()) !== null && _f !== void 0 ? _f : '-');
    const fileName = (_g = file.getFileName()) !== null && _g !== void 0 ? _g : '';
    return `
  ${chalk.red(`${packageName} error:`)}

  ðŸš¨  ${message}
  ${printStacktrace ? `
  ðŸ‘‰  ${chalk.yellow.bold(methodName)}
  @ file: ${chalk.underline(fileName)}
  @ line: [${line.toString()}:${col.toString()}]

  ${(0, exports.stringifyStackTrace)(restStack)}\n` : ''}
  `;
};
exports.coreErrorStackTraceFactory = coreErrorStackTraceFactory;
const coreErrorFactory = (message, opts) => new error_model_1.CoreError(message || 'Something is not right...', {
    stackTraceFactory: (0, exports.coreErrorStackTraceFactory)(opts),
    context: exports.coreErrorFactory,
});
exports.coreErrorFactory = coreErrorFactory;
