/// <reference types="node" />
import { Event } from '../event/event.interface';
import { NamedError } from '../+internal/utils';
export declare enum ErrorType {
    CORE_ERROR = "CoreError",
    CONTEXT_ERROR = "ContextError",
    EVENT_ERROR = "EventError"
}
export declare class CoreError extends NamedError {
    readonly message: string;
    constructor(message: string, options: {
        stackTraceFactory: (message: string, stack: NodeJS.CallSite[]) => string;
        context: any;
    });
}
export declare class ContextError extends NamedError {
    readonly message: string;
    constructor(message: string);
}
export declare class EventError extends NamedError {
    readonly event: Event;
    readonly message: string;
    readonly data?: any[] | Record<string, unknown> | undefined;
    constructor(event: Event, message: string, data?: any[] | Record<string, unknown> | undefined);
}
export declare const isCoreError: (error: Error | undefined) => error is CoreError;
export declare const isEventError: (error: Error | undefined) => error is EventError;
//# sourceMappingURL=error.model.d.ts.map